* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

body {
  font-family: helvetica neue, helvetica, arial, san-serif;
  color: #FFFFFF; }

#container {
  background-color: #EBEBEB; }

/**
 * Columns in SSGS rely on `box-sizing: border-box;` in order to work properly.
 * It is considered good practice to just apply the 'correct' box-sizing to all
 * elements, even by people like Paul Irish.
 * (see: http://paulirish.com/2012/box-sizing-border-box-ftw/)
 *
 * Without Compass:
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
 *
 * With Compass:
    @import "compass/css3/box-sizing";
    @include box-sizing(border-box);
 */
/**
 * $gutters is the only variable you'll ever need to set yourself. Use whatever
 * kind of value you want, be it px, em, rem or even percentages (allthough that would)
 * really miss the whole point of SSGS.
 */
/**
 * SSGS uses floats to do the heavy lifting with the layout so there needs to be a
 * clearfix. The one that's worked best for me is Nicolas Gallagher's `Micro Clearfix`
 * hack. It is included below. If you already have a clearfix in place, feel free to
 * remove it, but be sure to change the `@extend` rule inside `.grid`.
 * (see: http://nicolasgallagher.com/micro-clearfix-hack/)
 */
.grid {
  *zoom: 1; }
  .grid::before, .grid::after {
    content: " ";
    display: table; }
  .grid::after {
    clear: both; }

/**
 * With SSGS, you define grid columns in your CSS using mixins. It's quite a great
 * thing as it removes the dependency on all those classes in your HTML.
 *
 * Example:
    .item {
        @include grid-col("one half"); // Equivalent to `grid-col("1/2")`.
    }
 *
 * You could also change SSGS by mapping the mixins to classes.
 *
 * Example:
    .one-half {
        @include grid-col("one half");
    }
 *
 * Still, it's prefferable to work with the mixins directly in your CSS as it allows
 * easy changes of the column count to enable a fully responsive grid. The following
 * example shows a typical mobile-first grid (i.e. 1-2-3-4 columns).
 *
 * Example:
    .item {
        @include grid-col;

        @media (min-width: 30em) {
            @include grid-col("one half");
        }

        @media (min-width: 40em) {
            @include grid-col("one third");
        }

        @media (min-width: 50em) {
            @include grid-col("one quarter");
        }
    }
 */
.item {
  display: block;
  float: left;
  padding-left: 1.5em; }

/**
 * One of the most cumbersome things with traditional grid system is their use of
 * classes like `.end`, `.omega` or the like in order to remove the gutter at the start
 * or the end of a row. With SSGS this is not necessary anymore, yay! Allthough you don't
 * need to add the .grid class to your HTML, I think it's the preferrable way, as it makes
 * the basic structure much more easily visible. However, feel free to just @extend the
 * class from within your SCSS.
 *
 * Example:
    <div class="grid">
        <div class="item"></div>
        <div class="item"></div>
    </div>

    .item {
        @include grid-col("one half");
    }
 *
 * Note: Don't apply things like backgrounds or borders to the columns themselves.
 * It's neither good practice (use grids only for layout, not for styling) nor will
 * it work with SGSS. Use an element inside the column to do those things.
 */
.grid {
  margin-left: -1.5em; }

.item {
  width: 100%;
  border: 1px solid #000000; }
  @media (min-width: 30em) {
    .item {
      width: 50%; } }
  @media (min-width: 40em) {
    .item {
      width: 33.333%; } }
  @media (min-width: 50em) {
    .item {
      width: 25%; } }
  @media (min-width: 60em) {
    .item {
      width: 16.666%; } }
